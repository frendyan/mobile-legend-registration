public function markReject(Request $request){
        $orderId = $request->get('order_id');
        $fromUserId = $request->get('from_user_id');
        $wdId = $request->get('withdraw_id');
        $packageId = $request->get('package_id');
        $pairingId = $request->get('pairing_id');
        
         // set status to 2
        DB::table('pairings')
            ->where('id', $pairingId)
            ->update([
                'status' => 3
        ]);
        
         return redirect('page/side-menu/light/dashboard')
                ->with('success', 'Rejected Successfully');
        
    }
    
    public function markDone(Request $request)
    {
        $orderId = $request->get('order_id');
        $fromUserId = $request->get('from_user_id');
        $wdId = $request->get('withdraw_id');
        $packageId = $request->get('package_id');
        $pairingId = $request->get('pairing_id');

        // set status to 2
        DB::table('pairings')
            ->where('id', $pairingId)
            ->update([
                'status' => 2
            ]);
        
        DB::table('withdraws')
            ->where('id', $wdId)
            ->update([
                'status' => 2
        ]);

        $countRemainingRecord = Pairing::where('invest_order_id', '=', $orderId)
               ->where(function ($query) {
                   $query->where('status', '=', 0)
                   ->orWhere('status', '=', 1);
               })->count();

        $orderStatus = InvestOrder::where('id', '=', $orderId)
        ->where(function ($query) {
            $query->where('status', '=', 0);
        })->count();

        $countRemainingRecord = 0;
        // dd($countRemainingRecord);

        if ($countRemainingRecord == 0 && $orderStatus == 0) {
            //set user active package
            DB::table('active_packages')
            ->where('user_id', $fromUserId)
            ->update([
                'invest_package_id' => $packageId,
                'status' => 1,
                'date_active' => now(),
                'date_expired' => now()->addWeek(),
            ]);

            //get transfer amount
            $amount = DB::table('pairings')->where('invest_order_id', $orderId)->sum('amount');

            //get profit percentage
            $packageGetProfit = InvestPackage::firstOrFail()->where('id', $packageId)->get();
            $subsetProfit = $packageGetProfit->map->only(['profit']);

            //get User Bank Data
            $packageGetBank = BankAccount::firstOrFail()->where('user_id', $fromUserId)->get();
            $subsetBank = $packageGetBank->map->only(['bank_name','bank_own', 'no_rek']);

            //get User Layer
            $packageGetNetwork = Network::firstOrFail()->where('user_id', $fromUserId)->get();
            $subsetNetwork = $packageGetNetwork->map->only(['layer']);

            //create withdraw for current user
            Withdraw::create([
                'user_id' => $fromUserId,
                'wd_code' => 'WDR-' . intVal(microtime(true) * 1000),
                'date_created' => now(),
                'amount' => $amount + ($amount * $subsetProfit[0]['profit'] / 100),
                'amount_left' => $amount + ($amount * $subsetProfit[0]['profit'] / 100),
                'withdraw_type' => 1,
                'withdraw_to' => $subsetBank[0]['bank_name'] . ' - ' . $subsetBank[0]['no_rek'],
                // 'status' => 0,
            ]);

            // dd($subsetNetwork[0]['layer']);
            //check current user layer
            if ($subsetNetwork[0]['layer'] > 1) {
                $userid = $fromUserId;

                //add bonus for current user upline(s)
                for ($i = $subsetNetwork[0]['layer'] - 1; $i > 0; $i--) {
                    $packageGetUpline = Network::firstOrFail()->where('user_id', $userid)->get();
                    $subsetUpline = $packageGetUpline->map->only(['upline_id']);

                    $upline_id = $subsetUpline[0]['upline_id'];
                    // dd($upline_id);

                    $upline_data = User::firstOrFail()->where('id', $upline_id)->get();
                    $subsetUplineData = $upline_data->map->only(['level', 'bonus_current', 'bonus_total', 'bonus_manajer_total', 'bonus_manajer_current']);

                    $bonusForUpline = 0.1 * ($amount * $subsetProfit[0]['profit'] / 100);

                    $bonusTotal = $subsetUplineData[0]['bonus_total'] + $bonusForUpline;
                    $bonusCurrent = $subsetUplineData[0]['bonus_current'] + $bonusForUpline;
                    DB::table('users')
                    ->where('id', $upline_id)
                    ->update([
                        'bonus_total' => $bonusTotal,
                    ]);
                    DB::table('bonus_logs')->insert([
                        'user_id' => $upline_id,
                        'from_user_id' => Auth::user()->id,
                        'bonus_type' => 1,
                        'flow_type' => 1,
                        'amount' => $bonusForUpline,
                    ]);
                    
                    if ($subsetUplineData[0]['level'] == 'manajer1') {
                        $bonusManajer1 = 0.05 * ($amount * $subsetProfit[0]['profit'] / 100);
                        $bonusManajerCurrent = $subsetUplineData[0]['bonus_manajer_current'] + $bonusManajer1;
                        $bonusManajerTotal = $subsetUplineData[0]['bonus_manajer_total'] + $bonusManajer1;
                        $bonusTotal = $subsetUplineData[0]['bonus_total'] + $bonusForUpline;
                        $bonusCurrent = $subsetUplineData[0]['bonus_current'] + $bonusForUpline;
                        DB::table('users')
                        ->where('id', $upline_id)
                        ->update([
                            'bonus_total' => $bonusTotal,
                            'bonus_current' => $bonus_current,
                            'bonus_manajer_current' => $bonus_manajer_current,
                            'bonus_manajer_total' => $bonusManajerTotal,
                        ]);
                        DB::table('bonus_logs')->insert([
                            'user_id' => $upline_id,
                            'from_user_id' => Auth::user()->id,
                            'bonus_type' => 2,
                            'flow_type' => 1,
                            'amount' => $bonusForManajer1,
                        ]);
                        break;
                    } elseif ($subsetUplineData[0]['level'] == 'manajer2') {
                        $bonusManajer2 = 0.03 * ($amount * $subsetProfit[0]['profit'] / 100);
                        $bonusManajerCurrent = $subsetUplineData[0]['bonus_manajer_current'] + $bonusManajer2;
                        $bonusManajerTotal = $subsetUplineData[0]['bonus_manajer_total'] + $bonusManajer2;
                        $bonusTotal = $subsetUplineData[0]['bonus_total'] + $bonusForUpline;
                        $bonusCurrent = $subsetUplineData[0]['bonus_current'] + $bonusForUpline;
                        DB::table('users')
                        ->where('id', $upline_id)
                        ->update([
                            'bonus_total' => $bonusTotal,
                            'bonus_current' => $bonus_current,
                            'bonus_manajer_current' => $bonus_manajer_current,
                            'bonus_manajer_total' => $bonusManajerTotal,
                        ]);
                        DB::table('bonus_logs')->insert([
                            'user_id' => $upline_id,
                            'from_user_id' => Auth::user()->id,
                            'bonus_type' => 2,
                            'flow_type' => 1,
                            'amount' => $bonusForManajer2,
                        ]);
                        break;
                    } elseif ($subsetUplineData[0]['level'] == 'manajer3') {
                        $bonusManajer3 = 0.01 * ($amount * $subsetProfit[0]['profit'] / 100);
                        $bonusManajerCurrent = $subsetUplineData[0]['bonus_manajer_current'] + $bonusManajer3;
                        $bonusManajerTotal = $subsetUplineData[0]['bonus_manajer_total'] + $bonusManajer3;
                        $bonusTotal = $subsetUplineData[0]['bonus_total'] + $bonusForUpline;
                        $bonusCurrent = $subsetUplineData[0]['bonus_current'] + $bonusForUpline;
                        DB::table('users')
                        ->where('id', $upline_id)
                        ->update([
                            'bonus_total' => $bonusTotal,
                            'bonus_current' => $bonus_current,
                            'bonus_manajer_current' => $bonus_manajer_current,
                            'bonus_manajer_total' => $bonusManajerTotal,
                        ]);
                        DB::table('bonus_logs')->insert([
                            'user_id' => $upline_id,
                            'from_user_id' => Auth::user()->id,
                            'bonus_type' => 2,
                            'flow_type' => 1,
                            'amount' => $bonusForManajer3,
                        ]);
                        break;
                    }
                }
            }
        }

         return redirect('page/side-menu/light/withdrawhistory')
                ->with('success', 'Proses Withdraw telah selesai.  Silahkan mengisi testimoni sebelum melakukan withdraw selanjutnya');
    }

   public function wBon(Request $request, User $user)
    {
        $request->validate([
            'amount' => 'required|numeric',
            'withdraw_type' => 'required',
        ]);
        if ($request->pincode != Auth::user()->pincode) {
            if($request->withdraw_type == 1){
            return redirect('page/side-menu/light/withdraw')
                ->with('success', 'Kode Pin Salah');
            }else if($request->withdraw_type == 2){
            return redirect('page/side-menu/light/penarikanbonusmanager')
                ->with('success', 'Kode Pin Salah');
            }
                
        }else if($request->amount > Auth::user()->bonus_current){
            if($request->withdraw_type == 1){
            return redirect('page/side-menu/light/withdraw')
                 ->with('success', 'Jumlah bonus tidak mencukupi');
            }else if($request->withdraw_type == 2){
            return redirect('page/side-menu/light/penarikanbonusmanager')
                ->with('success', 'Jumlah bonus tidak mencukupi');
            }
            
        } else {
        
         $packageGetBank = BankAccount::firstOrFail()->where('user_id', Auth::user()->id)->get();
         $subsetBank = $packageGetBank->map->only(['bank_name','bank_own', 'no_rek']);
         
         //set withdrawal limit
        $monday = strtotime("last monday");
        $monday = date('w', $monday)==date('w') ? $monday+7*86400 : $monday;
        
        $sunday = strtotime(date("Y-m-d",$monday)." +7 days");
        
        $this_week_start = date("Y-m-d",$monday);
        $this_week_end = date("Y-m-d",$sunday);
        
        $count = DB::table('withdraws')->where('date_created', '>', $this_week_start)->where('date_created', '<', $this_week_end)->where('user_id', Auth::user()->id)->count();
        $testi = DB::table('withdraws')->where('user_id', Auth::user()->id)->where('status', 2)->count();
        $sum = DB::table('withdraws')->where('date_created', '>', $this_week_start)->where('date_created', '<', $this_week_end)->where('user_id', Auth::user()->id)->sum('amount');
        if($count>1)
        {
            if($request->withdraw_type == 1){
            return redirect('page/side-menu/light/withdraw')
                ->with('success', 'Batas Withdraw adalah 1x per Minggu');
            }else if($request->withdraw_type == 2){
            return redirect('page/side-menu/light/penarikanbonusmanager')
                ->with('success', 'Batas Withdraw adalah 1x per Minggu');
            }
        }else if($testi > 0){
            return redirect('page/side-menu/light/withdrawhistory')
                ->with('success', 'Mohon isi testimoni terlebih dahulu untuk melakukan transaksi withdraw');
                
        }else if($sum >= 1500000 and Auth::user()->level =="member"){
            return redirect('page/side-menu/light/withdraw')
                ->with('success', 'Batas Withdraw untuk Level Member adalah '. number_format(1500000, 0, ',', '.').' per Minggu nya');
                
        }else if($sum >= 1500000 and (Auth::user()->level =="manajer1" or Auth::user()->level =="manajer2" or Auth::user()->level =="manajer3")){
            return redirect('page/side-menu/light/withdraw')
                ->with('success', 'Batas Withdraw untuk Level Manager adalah '. number_format(6000000, 0, ',', '.').' per Minggu nya');
                
        }
        
        Withdraw::create([
            'wd_code' => 'WDR-'.intVal(microtime(true)*1000),
            'user_id' => Auth::user()->id,
            'date_created' => now(),
            'amount' => $request->amount,
            'amount_left' => $request->amount,
            'withdraw_type' => $request->withdraw_type,
            'withdraw_to' => $subsetBank[0]['bank_name'] . ' - ' . $subsetBank[0]['no_rek'],
            ]);
        
        DB::table('bonus_logs')->insert([
            'user_id' => Auth::user()->id,
            'bonus_type' => $request->withdraw_type,
            'flow_type' => 2,
            'amount' => $request->amount,
        ]);

        $affected = DB::table('users')
                    ->where('id', Auth::id())
                    ->update(['bonus_current' => Auth::user()->bonus_current - $request->amount]);
                    
        if($request->withdraw_type == 1){
            return redirect('page/side-menu/light/withdraw')
                ->with('success', 'Withdraw berhasil dibuat');
            }else if($request->withdraw_type == 2){
            return redirect('page/side-menu/light/penarikanbonusmanager')
                ->with('success', 'Withdraw berhasil dibuat');
            }
        }
    } 


    public function addTestimoni(Request $request){
        DB::table('testimonials')->insert([
            'user_id' => Auth::user()->id,
            'position' => Auth::user()->level,
            'description' => $request->testi,
            'status' => 0,
        ]);
        
        DB::table('withdraws')
        ->where('id', $request->withdraw_id)
        ->update([
            'status' => 3,
        ]);
        
        
        return redirect('page/side-menu/light/withdrawhistory')
                ->with('success', 'Testimoni berhasil disimpan');
    }